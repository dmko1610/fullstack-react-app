{"version":3,"sources":["components/UI/Input/Input.tsx","components/UI/Input/Input.css","components/Order/CheckoutSummary/CheckoutSummary.css","containers/Checkout/ContactData/ContactData.css","components/Order/CheckoutSummary/CheckoutSummary.tsx","containers/Checkout/ContactData/ContactData.tsx","containers/Checkout/Checkout.tsx"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","checkoutSummary","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","connect","state","ings","burgerBuilder","price","totalPrice","loading","order","token","auth","userId","dispatch","onOrderBurger","orderData","actions","withErrorHandler","useState","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","orderForm","setOrderForm","formIsValid","setFormIsValid","formElementsArray","id","config","form","onSubmit","event","preventDefault","formData","formElementIdentifier","formElement","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","inputChangedHandler","disabled","Spinner","ContactData","axios","purchased","summary","to","purchasedRedirect","console","log","history","goBack","replace","path","match","component"],"mappings":"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","file":"static/js/3.9e551712.chunk.js","sourcesContent":["import React from \"react\";\r\n// @ts-ignore\r\nimport classes from './Input.css'\r\n\r\nconst input = (props: any) => {\r\n    let inputElement = null;\r\n    let inputClasses = [classes.InputElement];\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('select'):\r\n            inputElement = <select\r\n                className={inputClasses.join(' ')}\r\n                value={props.value}\r\n                onChange={props.changed}>\r\n                {props.elementConfig.options.map((option: any) => (\r\n                    <option\r\n                        key={option.value}\r\n                        value={option.value}>\r\n                        {option.displayValue}\r\n                    </option>\r\n\r\n                ))}\r\n            </select>;\r\n            break;\r\n        default:\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>\r\n    }\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1cZHG\",\"Label\":\"Input_Label__tgLwJ\",\"InputElement\":\"Input_InputElement__2BwGT\",\"Invalid\":\"Input_Invalid__1KVom\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__38kIS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__1IWN9\"};","import React from \"react\";\r\nimport Burger from '../../Burger/Burger'\r\nimport Button from '../../UI/Button/Button'\r\n// @ts-ignore\r\nimport classes from './CheckoutSummary.css';\r\n\r\nconst checkoutSummary = (props: any) => {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We hope it tastes well!</h1>\r\n            <div style={{width: '100%', margin: 'auto'}}>\r\n                <Burger ingredients={props.ingredients}/>\r\n            </div>\r\n            <Button\r\n                btnType=\"Danger\"\r\n                clicked={props.checkoutCancelled}>CANCEL</Button>\r\n            <Button\r\n                btnType=\"Success\"\r\n                clicked={props.checkoutContinued}>CONTINUE</Button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default checkoutSummary;\r\n","import React, {useState} from \"react\";\r\nimport Button from '../../../components/UI/Button/Button';\r\n// @ts-ignore\r\nimport classes from './ContactData.css';\r\nimport {connect} from 'react-redux'\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport {RouteComponentProps} from \"react-router\";\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from \"../../../hoc/withErrorHanlder/withErrorHandler\";\r\nimport * as actions from '../../../store/actions/index'\r\nimport {checkValidity, updateObject} from \"../../../shared/utility\";\r\n\r\ninterface ChildComponentProps extends RouteComponentProps<any> {\r\n    ings: {},\r\n    price: number,\r\n    onOrderBurger: any,\r\n    loading: boolean,\r\n    token: string,\r\n    userId: string\r\n}\r\n\r\nconst ContactData = (props: ChildComponentProps) => {\r\n    const [orderForm, setOrderForm] = useState({\r\n        name: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: 'Your Name'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        street: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: 'Street'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        zipCode: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: 'ZIP Code'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                minLength: 5,\r\n                maxLength: 5,\r\n                isNumeric: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        country: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: 'Country'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        email: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'email',\r\n                placeholder: 'Your E-Mail'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                isEmail: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        deliveryMethod: {\r\n            elementType: 'select',\r\n            elementConfig: {\r\n                options: [\r\n                    {value: 'fastest', displayValue: 'Fastest'},\r\n                    {value: 'cheapest', displayValue: 'Cheapest'}\r\n                ]\r\n            },\r\n            value: '',\r\n            valid: true,\r\n            touched: false\r\n        }\r\n    });\r\n    const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n    const orderHandler = (event: any) => {\r\n        event.preventDefault();\r\n        const formData = {};\r\n        for (let formElementIdentifier in orderForm) {\r\n            (formData as any)[formElementIdentifier] = (orderForm as any)[formElementIdentifier].value;\r\n        }\r\n        const order = {\r\n            ingredients: props.ings,\r\n            price: props.price,\r\n            orderData: formData,\r\n            userId: props.userId\r\n        };\r\n        props.onOrderBurger(order, props.token);\r\n    };\r\n\r\n    const inputChangedHandler = (event: any, inputIdentifier: string) => {\r\n        const updatedFormElement = updateObject((orderForm as any)[inputIdentifier], {\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, (orderForm as any)[inputIdentifier].validation),\r\n            touched: true\r\n        });\r\n        const updatedOrderForm = updateObject(orderForm, {\r\n            [inputIdentifier]: updatedFormElement\r\n        });\r\n        let formIsValid = true;\r\n        for (let inputIdentifier in updatedOrderForm) {\r\n            formIsValid = (updatedOrderForm as any)[inputIdentifier].valid && formIsValid\r\n        }\r\n        setOrderForm(updatedOrderForm);\r\n        setFormIsValid(formIsValid);\r\n    };\r\n\r\n    const formElementsArray = [];\r\n    for (let key in orderForm) {\r\n        formElementsArray.push({\r\n            id: key,\r\n            config: (orderForm as any)[key]\r\n        })\r\n    }\r\n    let form = (\r\n        <form onSubmit={orderHandler}>\r\n            {formElementsArray.map(formElement => (\r\n                <Input\r\n                    key={formElement.id}\r\n                    elementType={formElement.config.elementType}\r\n                    elementConfig={formElement.config.elementConfig}\r\n                    value={formElement.config.value}\r\n                    invalid={!formElement.config.valid}\r\n                    shouldValidate={formElement.config.validation}\r\n                    touched={formElement.config.touched}\r\n                    changed={(event: any) => inputChangedHandler(event, formElement.id)}/>\r\n            ))}\r\n            <Button\r\n                btnType=\"Success\"\r\n                disabled={!formIsValid}>ORDER</Button>\r\n        </form>);\r\n    if (props.loading) {\r\n        form = <Spinner/>;\r\n    }\r\n    return (\r\n        <div className={classes.ContactData}>\r\n            <h4>Enter your Contact Data</h4>\r\n            {form}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        onOrderBurger: (orderData: {}, token: string) => dispatch(actions.purchaseBurger(orderData, token))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));\r\n","import React from \"react\";\r\nimport {Redirect, Route, RouteComponentProps} from 'react-router-dom';\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\nimport {connect} from 'react-redux';\r\n\r\ninterface ChildComponentProps extends RouteComponentProps<any> {\r\n    ings: {},\r\n    purchased: boolean\r\n}\r\n\r\nconst Checkout = (props: ChildComponentProps) => {\r\n\r\n    const checkoutCancelledHandler = () => {\r\n        props.history.goBack();\r\n    };\r\n\r\n    const checkoutContinuedHandler = () => {\r\n        props.history.replace('/checkout/contact-data')\r\n    };\r\n\r\n    let summary = <Redirect to=\"/\"/>;\r\n    if (props.ings) {\r\n        const purchasedRedirect = props.purchased ? <Redirect to=\"/\"/> : null;\r\n        console.log(props);\r\n        summary = (\r\n            <div>\r\n                {purchasedRedirect}\r\n                <CheckoutSummary\r\n                    ingredients={props.ings}\r\n                    checkoutCancelled={checkoutCancelledHandler}\r\n                    checkoutContinued={checkoutContinuedHandler}/>\r\n                <Route\r\n                    path={props.match.path + '/contact-data'}\r\n                    component={ContactData}/>\r\n            </div>)\r\n    }\r\n    return summary\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n"],"sourceRoot":""}