{"version":3,"sources":["components/UI/Input/Input.tsx","components/UI/Input/Input.css","containers/Auth/Auth.css","containers/Auth/Auth.tsx"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","connect","state","loading","auth","error","isAuthenticated","token","buildingBurger","burgerBuilder","building","authRedirectPath","dispatch","onAuth","email","password","isSignUp","actions","onSetAuthRedirectPath","useState","type","placeholder","validation","required","isEmail","valid","minLength","authForm","setAuthForm","setIsSignUp","useEffect","formElementsArray","id","config","form","formElement","event","controlName","updatedControls","updateObject","target","checkValidity","inputChangedHandler","errorMessage","message","authRedirect","to","Auth","onSubmit","preventDefault","btnType","clicked"],"mappings":"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","file":"static/js/4.455a858e.chunk.js","sourcesContent":["import React from \"react\";\r\n// @ts-ignore\r\nimport classes from './Input.css'\r\n\r\nconst input = (props: any) => {\r\n    let inputElement = null;\r\n    let inputClasses = [classes.InputElement];\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('select'):\r\n            inputElement = <select\r\n                className={inputClasses.join(' ')}\r\n                value={props.value}\r\n                onChange={props.changed}>\r\n                {props.elementConfig.options.map((option: any) => (\r\n                    <option\r\n                        key={option.value}\r\n                        value={option.value}>\r\n                        {option.displayValue}\r\n                    </option>\r\n\r\n                ))}\r\n            </select>;\r\n            break;\r\n        default:\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>\r\n    }\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1cZHG\",\"Label\":\"Input_Label__tgLwJ\",\"InputElement\":\"Input_InputElement__2BwGT\",\"Invalid\":\"Input_Invalid__1KVom\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__2UraA\"};","import React, {useEffect, useState} from 'react';\r\nimport Input from '../../components/UI/Input/Input'\r\nimport Button from '../../components/UI/Button/Button'\r\n// @ts-ignore\r\nimport classes from './Auth.css'\r\nimport * as actions from '../../store/actions/index'\r\nimport {connect} from 'react-redux';\r\nimport Spinner from '../../components/UI/Spinner/Spinner'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {checkValidity, updateObject} from \"../../shared/utility\";\r\n\r\ninterface IProps {\r\n    onAuth: any,\r\n    loading: boolean,\r\n    error: any,\r\n    isAuthenticated: boolean,\r\n    buildingBurger: boolean,\r\n    authRedirectPath: string,\r\n    onSetAuthRedirectPath: any\r\n}\r\n\r\nconst Auth = (props: IProps) => {\r\n    const [authForm, setAuthForm] = useState({\r\n        email: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'email',\r\n                placeholder: 'Mail Address'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                isEmail: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        password: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'password',\r\n                placeholder: 'Password'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                minLength: 6\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        }\r\n    });\r\n    const [isSignUp, setIsSignUp] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (!props.buildingBurger && props.authRedirectPath !== '/') {\r\n            props.onSetAuthRedirectPath()\r\n        }\r\n    }, []);\r\n\r\n    const inputChangedHandler = (event: any, controlName: string) => {\r\n        const updatedControls = updateObject(authForm, {\r\n            [controlName]: updateObject((authForm as any)[controlName], {\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, (authForm as any)[controlName].validation),\r\n                touched: true\r\n            })\r\n        });\r\n        setAuthForm(updatedControls)\r\n    };\r\n\r\n    const submitHandler = (event: any) => {\r\n        event.preventDefault();\r\n        props.onAuth(authForm.email.value, authForm.password.value, isSignUp)\r\n    };\r\n\r\n    const switchAuthModeHandler = () => {\r\n        setIsSignUp(!isSignUp)\r\n    };\r\n\r\n    const formElementsArray = [];\r\n    for (let key in authForm) {\r\n        formElementsArray.push({\r\n            id: key,\r\n            config: (authForm as any)[key]\r\n        })\r\n    }\r\n    let form: any = formElementsArray.map(formElement => (\r\n        <Input\r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}\r\n            changed={(event: any) => inputChangedHandler(event, formElement.id)}\r\n        />\r\n    ));\r\n\r\n    if (props.loading) {\r\n        form = <Spinner/>\r\n    }\r\n\r\n    let errorMessage = null;\r\n    if (props.error) {\r\n        errorMessage = (\r\n            <p>{props.error.message}</p>\r\n        )\r\n    }\r\n    let authRedirect = null;\r\n    if (props.isAuthenticated) {\r\n        authRedirect = <Redirect to={props.authRedirectPath}/>;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Auth}>\r\n            {authRedirect}\r\n            {errorMessage}\r\n            <form onSubmit={submitHandler}>\r\n                {form}\r\n                <Button btnType=\"Success\">\r\n                    SUBMIT\r\n                </Button>\r\n            </form>\r\n            <Button\r\n                btnType=\"Danger\"\r\n                clicked={switchAuthModeHandler}>\r\n                SWITCH TO {isSignUp ? 'SIGN-IN' : 'SIGN-UP'}\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        onAuth: (email: string, password: string, isSignUp: boolean) => dispatch(actions.auth(email, password, isSignUp)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n"],"sourceRoot":""}