{"version":3,"sources":["components/Order/Order.css","components/Order/Order.tsx","containers/Orders/Orders.tsx"],"names":["module","exports","order","props","ingredients","ingredientName","push","name","amount","ingredientOutput","map","ig","key","style","textTransform","display","margin","border","padding","className","classes","Order","price","toFixed","connect","state","orders","loading","token","auth","userId","dispatch","onFetchOrders","actions","withErrorHandler","useEffect","Spinner","id","axios"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,MAAQ,uB,8ECiCXC,EA9BD,SAACC,GACX,IAAMC,EAAc,GACpB,IAAK,IAAIC,KAAkBF,EAAMC,YAC7BA,EAAYE,KAAK,CACbC,KAAMF,EACNG,OAAQL,EAAMC,YAAYC,KAIlC,IAAMI,EAAmBL,EAAYM,IAAI,SAAAC,GACrC,OAAO,0BACHC,IAAKD,EAAGJ,KACRM,MAAO,CACHC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAS,QAEfP,EAAGJ,KATE,KASMI,EAAGH,OATT,OAYX,OACI,yBAAKW,UAAWC,IAAQC,OACpB,2CAAiBZ,GACjB,qCAAU,uCAAaN,EAAMmB,MAAMC,QAAQ,O,uCCwBxCC,sBAfS,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAMvB,MAAMwB,OACpBC,QAASF,EAAMvB,MAAMyB,QACrBC,MAAOH,EAAMI,KAAKD,MAClBE,OAAQL,EAAMI,KAAKC,SAIA,SAACC,GACxB,MAAO,CACHC,cAAe,SAACJ,EAAeE,GAAhB,OAAmCC,EAASE,IAAoBL,EAAOE,OAI/EN,CAA6CU,YArC7C,SAAC/B,GAEZgC,oBAAU,WACNhC,EAAM6B,cAAc7B,EAAMyB,MAAOzB,EAAM2B,SACxC,IAEH,IAAIJ,EAAc,kBAACU,EAAA,EAAD,MASlB,OARKjC,EAAMwB,UACPD,EAASvB,EAAMuB,OAAOhB,IAAI,SAACR,GAAD,OACtB,kBAAC,EAAD,CACIU,IAAKV,EAAMmC,GACXjC,YAAaF,EAAME,YACnBkB,OAAQpB,EAAMoB,WAItB,6BACKI,IAoBwEY","file":"static/js/5.7f8f1384.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__1mKKw\"};","import React from \"react\";\r\n// @ts-ignore\r\nimport classes from './Order.css';\r\n\r\nconst order = (props: any) => {\r\n    const ingredients = [];\r\n    for (let ingredientName in props.ingredients) {\r\n        ingredients.push({\r\n            name: ingredientName,\r\n            amount: props.ingredients[ingredientName]\r\n        });\r\n    }\r\n\r\n    const ingredientOutput = ingredients.map(ig => {\r\n        return <span\r\n            key={ig.name}\r\n            style={{\r\n                textTransform: 'capitalize',\r\n                display: 'inline-block',\r\n                margin: '0 8px',\r\n                border: '1px solid #ccc',\r\n                padding: '5px'\r\n            }}\r\n        >{ig.name} ({ig.amount})</span>\r\n    });\r\n\r\n    return (\r\n        <div className={classes.Order}>\r\n            <p>Ingredients: {ingredientOutput}</p>\r\n            <p>Price: <strong>USD {props.price.toFixed(2)}</strong></p>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default order;\r\n","import React, {useEffect} from \"react\";\r\nimport Order from '../../components/Order/Order';\r\nimport axios from '../../axios-orders';\r\nimport withErrorHandler from \"../../hoc/withErrorHanlder/withErrorHandler\";\r\nimport {connect} from \"react-redux\";\r\nimport * as actions from '../../store/actions/index'\r\nimport Spinner from '../../components/UI/Spinner/Spinner'\r\n\r\ninterface IProps {\r\n    onFetchOrders: any,\r\n    orders: any,\r\n    loading: boolean,\r\n    token: string,\r\n    userId: string\r\n}\r\n\r\nconst Orders = (props: IProps) => {\r\n\r\n    useEffect(() => {\r\n        props.onFetchOrders(props.token, props.userId);\r\n    }, []);\r\n\r\n    let orders: any = <Spinner/>;\r\n    if (!props.loading) {\r\n        orders = props.orders.map((order: any) => (\r\n            <Order\r\n                key={order.id}\r\n                ingredients={order.ingredients}\r\n                price={+order.price}/>\r\n        ))\r\n    }\r\n    return (\r\n        <div>\r\n            {orders}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        orders: state.order.orders,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        onFetchOrders: (token: string, userId: string) => dispatch(actions.fetchOrders(token, userId))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));\r\n"],"sourceRoot":""}